// Generated by gencpp from file vant/wp.msg
// DO NOT EDIT!


#ifndef VANT_MESSAGE_WP_H
#define VANT_MESSAGE_WP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vant
{
template <class ContainerAllocator>
struct wp_
{
  typedef wp_<ContainerAllocator> Type;

  wp_()
    : WP(0)
    , Reached(false)  {
    }
  wp_(const ContainerAllocator& _alloc)
    : WP(0)
    , Reached(false)  {
  (void)_alloc;
    }



   typedef int64_t _WP_type;
  _WP_type WP;

   typedef uint8_t _Reached_type;
  _Reached_type Reached;





  typedef boost::shared_ptr< ::vant::wp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vant::wp_<ContainerAllocator> const> ConstPtr;

}; // struct wp_

typedef ::vant::wp_<std::allocator<void> > wp;

typedef boost::shared_ptr< ::vant::wp > wpPtr;
typedef boost::shared_ptr< ::vant::wp const> wpConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vant::wp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vant::wp_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vant

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'vant': ['/home/laic/catkin_ws/src/vant/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vant::wp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vant::wp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vant::wp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vant::wp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vant::wp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vant::wp_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vant::wp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5e3b7442bcc3ff11f1802d2dd0024d85";
  }

  static const char* value(const ::vant::wp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5e3b7442bcc3ff11ULL;
  static const uint64_t static_value2 = 0xf1802d2dd0024d85ULL;
};

template<class ContainerAllocator>
struct DataType< ::vant::wp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vant/wp";
  }

  static const char* value(const ::vant::wp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vant::wp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 WP\n\
bool Reached\n\
";
  }

  static const char* value(const ::vant::wp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vant::wp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.WP);
      stream.next(m.Reached);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct wp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vant::wp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vant::wp_<ContainerAllocator>& v)
  {
    s << indent << "WP: ";
    Printer<int64_t>::stream(s, indent + "  ", v.WP);
    s << indent << "Reached: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Reached);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VANT_MESSAGE_WP_H
